#!/usr/bin/env ruby

# Todo:
# - Split out serialization into separate repository.
# - Add auto check for updates.
# - Allow friends to have nicknames.
# - Allow easy editing of most recent entry.

require "gli"
require "paint"

require "friends/introvert"
require "friends/version"

include GLI::App

program_desc "Spend time with the people you care about. Introvert-tested. "\
  "Extrovert-approved."

version Friends::VERSION

subcommand_option_handling :normal
arguments :strict

switch [:quiet],
  negatable: false,
  desc: "Quiet output messages"

flag [:filename],
  arg_name: "FILENAME",
  default_value: "./friends.md",
  desc: "Set the location of the friends file"

switch [:clean],
  negatable: false,
  desc: "Force a clean write of the friends file"

desc "Updates the `friends` program"
command :update do |update|
  update.action do
    search = `gem search friends`
    if match = search.match(/^friends\s\(([^\)]+)\)$/)
      remote_version = match[1]
      if remote_version.to_r > Friends::VERSION.to_r
        `gem update friends && gem cleanup friends`
        if $?.success?
          puts Paint["Updated to friends #{remote_version}", :bold, :green]
        else
          puts Paint[
            "Error updating to friends version #{remote_version}", :bold, :red
          ]
        end
      else
        puts Paint["Already up-to-date (#{Friends::VERSION})", :bold, :green]
      end
    end
  end
end

desc "Lists friends or activities"
command :list do |list|
  list.desc "List all friends"
  list.command :friends do |list_friends|
    list_friends.action do
      puts @introvert.list_friends
    end
  end

  list.desc "List favorite friends"
  list.command :favorites do |list_favorites|
    list_favorites.flag [:limit],
      arg_name: "NUMBER",
      default_value: 10,
      desc: "The number of friends to return"

    list_favorites.action do |_, options|
      limit = options[:limit].to_i
      favorites = @introvert.list_favorites(limit: limit)

      if limit == 1
        puts "Your best friend is #{favorites.first}"
      else
        puts "Your favorite friends:"

        num_str_size = favorites.size.to_s.size + 1
        favorites.each.with_index(1) do |name, rank|
          puts "#{"#{rank}.".ljust(num_str_size)} #{name}"
        end
      end
    end
  end

  list.desc "Lists all activities"
  list.command :activities do |list_activities|
    list_activities.flag [:limit],
      arg_name: "NUMBER",
      default_value: 10,
      desc: "The number of activities to return"

    list_activities.flag [:with],
      arg_name: "NAME",
      desc: "List only activities involving the given friend"

    list_activities.action do |_, options|
      limit = options[:limit].to_i
      puts @introvert.list_activities(limit: limit, with: options[:with])
    end
  end
end

desc "Adds a friend or activity"
command :add do |add|
  add.desc "Adds a friend"
  add.arg_name "NAME"
  add.command :friend do |add_friend|
    add_friend.action do |_, _, args|
      friend = @introvert.add_friend(name: args.first)
      @message = "Friend added: \"#{friend.name}\""
    end
  end

  add.desc "Adds an activity"
  add.arg_name "DESCRIPTION"
  add.command :activity do |add_activity|
    add_activity.action do |_, _, args|
      activity = @introvert.add_activity(serialization: args.first)
      @message = "Activity added: \"#{activity.display_text}\""
    end
  end

  add.desc "Adds a nickname to a friend"
  add.arg_name "NAME NICKNAME"
  add.command :nickname do |add_nickname|
    add_nickname.action do |_, _, args|
      friend = @introvert.add_nickname(name: args.first, nickname: args[1])
      @message = "Nickname added: \"#{friend}\""
    end
  end
end

desc "Remove a nickname"
command :remove do |remove|
  remove.desc "Removes a nickname from a friend"
  remove.arg_name "NAME NICKNAME"
  remove.command :nickname do |remove_nickname|
    remove_nickname.action do |_, _, args|
      friend = @introvert.remove_nickname(name: args.first, nickname: args[1])
      @message = "Nickname removed: \"#{friend}\""
    end
  end
end

desc "Graph a friend's relationship over time"
arg_name "NAME"
command :graph do |graph|
  graph.action do |_, _, args|
    # This math is taken from Minitest's Pride plugin (the PrideLOL class).
    PI_3 = Math::PI / 3

    colors = (0...(6 * 7)).map do |n|
      n *= 1.0 / 6
      r  = (3 * Math.sin(n           ) + 3).to_i
      g  = (3 * Math.sin(n + 2 * PI_3) + 3).to_i
      b  = (3 * Math.sin(n + 4 * PI_3) + 3).to_i

      [r, g, b].map { |c| c * 51 }
    end

    data = @introvert.graph(name: args.first)

    data.each do |month, count|
      print "#{month} |"
      puts colors.take(count).map { |rgb| Paint["â–ˆ", rgb] }.join
    end
  end
end

desc "Suggest friends to do activities with"
command :suggest do |suggest|
  suggest.action do
    suggestions = @introvert.suggest

    puts "Distant friend: "\
      "#{Paint[suggestions[:distant].sample || 'None found', :bold, :magenta]}"
    puts "Moderate friend: "\
      "#{Paint[suggestions[:moderate].sample || 'None found', :bold, :magenta]}"
    puts "Close friend: "\
      "#{Paint[suggestions[:close].sample || 'None found', :bold, :magenta]}"
  end
end

desc "Cleans your friends.md file"
command :clean do |clean|
  clean.action do
    filename = @introvert.clean
    @message = "File cleaned: \"#{filename}\""
  end
end

desc "List all stats"
command :stats do |stats|
  stats.action do
    puts "Total activities: #{@introvert.total_activities}"
    puts "Total friends: #{@introvert.total_friends}"
    days = @introvert.elapsed_days
    puts "Total time elapsed: #{days} day#{'s' if days != 1}"
  end
end

# Before each command, clean up all arguments and create the global Introvert.
pre do |global_options, _, options|
  final_options = global_options.merge!(options).select do |key, _|
    [:filename].include? key
  end

  @introvert = Friends::Introvert.new(final_options)
  true
end

post do |global_options|
  # After each command, clean if requested with the --clean flag.
  if global_options[:clean]
    filename = @introvert.clean
    @message = "File cleaned: \"#{filename}\""
  end

  # Print the output message (if there is one) unless --quiet is passed.
  puts @message unless @message.nil? || global_options[:quiet]
end

# If an error is raised, print the message to STDERR and exit the program.
on_error do |error|
  abort "Error: #{error}"
end

# Run the program and return the exit code corresponding to its success.
exit run(ARGV)
